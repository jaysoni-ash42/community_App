[{"/home/jay/React_app/Community_app/src/index.js":"1","/home/jay/React_app/Community_app/src/component/App.js":"2","/home/jay/React_app/Community_app/src/reportWebVitals.js":"3","/home/jay/React_app/Community_app/src/component/Nav.js":"4","/home/jay/React_app/Community_app/src/component/Home.js":"5","/home/jay/React_app/Community_app/src/component/Users.js":"6","/home/jay/React_app/Community_app/src/firebaseConfig/firebase.js":"7","/home/jay/React_app/Community_app/src/component/post.js":"8","/home/jay/React_app/Community_app/src/component/Uposts.js":"9","/home/jay/React_app/Community_app/src/component/Search.js":"10","/home/jay/React_app/Community_app/src/StateProvider.js":"11","/home/jay/React_app/Community_app/src/reducer.js":"12","/home/jay/React_app/Community_app/src/Context.js":"13"},{"size":606,"mtime":1612184802502,"results":"14","hashOfConfig":"15"},{"size":1581,"mtime":1612184304592,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1609574935995,"results":"17","hashOfConfig":"15"},{"size":5663,"mtime":1612184874087,"results":"18","hashOfConfig":"15"},{"size":1124,"mtime":1612185027762,"results":"19","hashOfConfig":"15"},{"size":5821,"mtime":1612186567589,"results":"20","hashOfConfig":"15"},{"size":605,"mtime":1611730951970,"results":"21","hashOfConfig":"15"},{"size":6117,"mtime":1612183671307,"results":"22","hashOfConfig":"15"},{"size":3607,"mtime":1612185112005,"results":"23","hashOfConfig":"15"},{"size":1972,"mtime":1612119730241,"results":"24","hashOfConfig":"15"},{"size":568,"mtime":1612183315239,"results":"25","hashOfConfig":"15"},{"size":484,"mtime":1612117505670,"results":"26","hashOfConfig":"15"},{"size":129,"mtime":1612118280039,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3bdpo2",{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/jay/React_app/Community_app/src/index.js",[],"/home/jay/React_app/Community_app/src/component/App.js",["56"],"/home/jay/React_app/Community_app/src/reportWebVitals.js",[],["57","58"],"/home/jay/React_app/Community_app/src/component/Nav.js",["59","60"],"/home/jay/React_app/Community_app/src/component/Home.js",[],"/home/jay/React_app/Community_app/src/component/Users.js",["61"],"/home/jay/React_app/Community_app/src/firebaseConfig/firebase.js",[],"/home/jay/React_app/Community_app/src/component/post.js",["62","63"],"/home/jay/React_app/Community_app/src/component/Uposts.js",[],"/home/jay/React_app/Community_app/src/component/Search.js",["64"],"import React, { useContext } from 'react'\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Post from \"./post\";\nimport { SearchPost, SearchUser } from \"../Context\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        justifyContent: 'space-evenly',\n        marginTop: 10\n    },\n    gridList: {\n        padding: theme.spacing(1)\n    },\n}));\n\nfunction Search() {\n    const { searchuser, setValue } = useContext(SearchUser);\n    const { searchpost, setPost } = useContext(SearchPost);\n    React.useEffect(() => {\n        setValue(JSON.parse(window.localStorage.getItem(\"value\")));\n        setPost(JSON.parse(window.localStorage.getItem(\"post\")));\n    }, [])\n    const classes = useStyles();\n    return (\n        <div className=\"search\">\n            {\n                Object.keys(searchuser).length > 0 ? <div className=\"user_header\">\n                    <img className=\"profile_image\" alt={searchuser[0].userimg} src={searchuser[0].userimg} />\n                    <h1 style={{ fontFamily: \"monospace\" }} >{searchuser[0].username.toUpperCase()}</h1>\n                </div> : <h6>Search the USer</h6>\n            }\n            <h1 className=\"post\"> Posts </h1>\n            <div className=\"posts_view\">\n                <Grid container spacing={1} className={classes.root}>\n                    {\n                        searchpost != null ? searchpost.map(post => (\n                            <Grid item xs={\"auto\"} className={classes.gridList} key={post._id} >\n                                <Post postid={post._id} img={post.img} username={post.username} post={post.post} comment={post.comments} userurl={post.userimg} like={post.like} key={post._id} />\n                            </Grid>\n                        )) : <h1 style={{ paddingBottom: 10 }}>No Post to show</h1>\n                    }\n                </Grid>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Search\n","/home/jay/React_app/Community_app/src/StateProvider.js",[],"/home/jay/React_app/Community_app/src/reducer.js",[],"/home/jay/React_app/Community_app/src/Context.js",[],{"ruleId":"65","severity":1,"message":"66","line":11,"column":10,"nodeType":"67","messageId":"68","endLine":11,"endColumn":31},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"65","severity":1,"message":"73","line":21,"column":11,"nodeType":"67","messageId":"68","endLine":21,"endColumn":21},{"ruleId":"65","severity":1,"message":"74","line":22,"column":11,"nodeType":"67","messageId":"68","endLine":22,"endColumn":21},{"ruleId":"65","severity":1,"message":"75","line":28,"column":20,"nodeType":"67","messageId":"68","endLine":28,"endColumn":28},{"ruleId":"65","severity":1,"message":"75","line":15,"column":22,"nodeType":"67","messageId":"68","endLine":15,"endColumn":30},{"ruleId":"76","severity":1,"message":"77","line":70,"column":8,"nodeType":"78","endLine":70,"endColumn":15,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":25,"column":8,"nodeType":"78","endLine":25,"endColumn":10,"suggestions":"81"},"no-unused-vars","'WbIncandescentTwoTone' is defined but never used.","Identifier","unusedVar","no-native-reassign",["82"],"no-negated-in-lhs",["83"],"'searchuser' is assigned a value but never used.","'searchpost' is assigned a value but never used.","'dispatch' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'comment' and 'getComment'. Either include them or remove the dependency array. If 'setCommentapi' needs the current value of 'comment', you can also switch to useReducer instead of useState and read 'comment' in the reducer.","ArrayExpression",["84"],"React Hook React.useEffect has missing dependencies: 'setPost' and 'setValue'. Either include them or remove the dependency array.",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [comment, getComment, state]",{"range":"90","text":"91"},"Update the dependencies array to be: [setPost, setValue]",{"range":"92","text":"93"},[2344,2351],"[comment, getComment, state]",[740,742],"[setPost, setValue]"]